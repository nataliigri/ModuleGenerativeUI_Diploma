import streamlit as st
import requests
import pandas as pd
import os
import json
from dotenv import load_dotenv
from render_screens import render_screen_st, render_main_screen, render_savings_goals_screen, render_statistics_screen

# ==== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API –∫–ª—é—á–∞ ====
load_dotenv()
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")

if not TOGETHER_API_KEY:
    st.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TOGETHER_API_KEY —É .env —Ñ–∞–π–ª—ñ.")
    st.stop()

# ==== –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è UI JSON –∑ LLaMA ====
def generate_ui_json(prompt):
    url = "https://api.together.xyz/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {TOGETHER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "meta-llama/Llama-3-70b-chat-hf",
        "messages": [
            {
                "role": "system",
                "content": "–¢–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä JSON UI —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—ñ–≤. "
                           
            },
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.4,
    }

    res = requests.post(url, headers=headers, json=payload)
    res.raise_for_status()
    return res.json()["choices"][0]["message"]["content"]

# ==== –í–∏—Ç—è–≥ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ JSON ====
def extract_json_block(text):
    brace_count = 0
    json_started = False
    result = ""
    for char in text:
        if char == '{':
            brace_count += 1
            json_started = True
        if json_started:
            result += char
        if char == '}':
            brace_count -= 1
            if brace_count == 0:
                break
    if result:
        return result
    else:
        raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ JSON.")


# ==== –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ====
st.set_page_config(page_title="üá∫üá¶ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UI (LLaMA)", layout="centered")
st.title("üß† –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UI (–Ω–∞ –±–∞–∑—ñ LLaMA 3)")

default_prompt = (
    "–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É —Ç–∞ —Ç—Ä–µ–∫—ñ–Ω–≥—É –±—é–¥–∂–µ—Ç—É (–¥–æ 10 –µ–∫—Ä–∞–Ω—ñ–≤): "
    "–æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –ª–æ–≥—ñ–Ω, –≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –∫–∞—Ä—Ç–∫–∞–º–∏ —Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º, —ñ—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏, –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç, "
    "–æ–≥–ª—è–¥ –±—é–¥–∂–µ—Ç—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö, —Ü—ñ–ª—ñ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è, —Ñ–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."
)

prompt = st.text_area("üìù –û–ø–∏—à—ñ—Ç—å –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫:", value=default_prompt, height=200)

# ==== –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ====
if st.button("üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ JSON"):
    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ LLaMA 3..."):
        try:
            raw_output = generate_ui_json(prompt)
            clean_json = extract_json_block(raw_output)
            data = json.loads(clean_json)

            st.success("‚úÖ JSON –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
            st.code(json.dumps(data, indent=2, ensure_ascii=False), language="json")
            st.session_state["ui_data"] = data

        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# ==== –ö–Ω–æ–ø–∫–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó ====
if "ui_data" in st.session_state:
    screens = st.session_state["ui_data"].get("screens", [])
    # –ó–Ω–∞–π–¥–µ–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –µ–∫—Ä–∞–Ω–∏ –ø–æ id
    main_screen = next((s for s in screens if s["id"] == "main"), None)
    goals_screen = next((s for s in screens if s["id"] == "goals"), None)
    statistics_screen = next((s for s in screens if s["id"] == "statistics"), None)

    if st.button("üì± –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –µ–∫—Ä–∞–Ω–∏ (–≥–æ–ª–æ–≤–Ω–∞, –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)"):
        if main_screen:
            render_main_screen(main_screen)
        if goals_screen:
            render_savings_goals_screen(goals_screen)
        if statistics_screen:
            render_statistics_screen(statistics_screen)

